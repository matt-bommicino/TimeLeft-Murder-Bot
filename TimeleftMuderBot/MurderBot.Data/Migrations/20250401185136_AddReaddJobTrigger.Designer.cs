// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MurderBot.Data.Context;

#nullable disable

namespace MurderBot.Data.Migrations
{
    [DbContext(typeof(MurderContext))]
    [Migration("20250401185136_AddReaddJobTrigger")]
    partial class AddReaddJobTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Murder")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MurderBot.Data.Models.AlwaysRemoveParticipant", b =>
                {
                    b.Property<int>("AlwaysRemoveParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlwaysRemoveParticipantId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("AlwaysRemoveParticipantId");

                    b.ToTable("AlwaysRemoveParticipant", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.AutoReAddToken", b =>
                {
                    b.Property<Guid>("TokenGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("DateClaimed")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("GroupCheckinId")
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("TokenGuid");

                    b.HasIndex("GroupCheckinId");

                    b.ToTable("AutoReAddToken", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.ChatMessage", b =>
                {
                    b.Property<string>("WaId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset?>("DeliverAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("OutgoingMessage")
                        .HasColumnType("bit");

                    b.Property<string>("ParticipantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset?>("SendAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("WaId");

                    b.ToTable("ChatMessage", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.ExemptParticipant", b =>
                {
                    b.Property<int>("ExemptParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExemptParticipantId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParticipantId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ExemptParticipantId");

                    b.ToTable("ExemptParticipant", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.Group", b =>
                {
                    b.Property<string>("WId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CheckInMessageResponseTimeout")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("CheckInReadTimeout")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DoMurders")
                        .HasColumnType("bit");

                    b.Property<bool>("Ignore")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBotAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastMessageExemptTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<DateTimeOffset?>("LastParticipantSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MessageSendStageMaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<string>("MinimumTimeBetweenRuns")
                        .IsRequired()
                        .HasColumnType("nvarchar(48)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ReminderCheckinMessages")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("RemovalStageMaxRetries")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WId");

                    b.ToTable("Group", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupAutoReply", b =>
                {
                    b.Property<int>("GroupAutoReplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupAutoReplyId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReplyMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TriggerRegEx")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupAutoReplyId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupAutoReply", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupAutoReplyMessage", b =>
                {
                    b.Property<int>("GroupAutoReplyMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupAutoReplyMessageId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<int>("GroupAutoReplyId")
                        .HasColumnType("int");

                    b.Property<string>("OutgoingMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GroupAutoReplyMessageId");

                    b.HasIndex("GroupAutoReplyId");

                    b.HasIndex("OutgoingMessageId");

                    b.ToTable("GroupAutoReplyMessage", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckIn", b =>
                {
                    b.Property<int>("GroupCheckinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupCheckinId"));

                    b.Property<int>("ChatMessageSendStageAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset?>("ChatResponsesFinished")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset?>("FirstMessageSent")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ParticipantsReadFinished")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RemovalStageAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTimeOffset?>("RemovalsCompleted")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UrlGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupCheckinId");

                    b.HasIndex("GroupId");

                    b.ToTable("GroupCheckIn", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckInMessage", b =>
                {
                    b.Property<int>("GroupCheckinMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupCheckinMessageId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<int>("GroupCheckinId")
                        .HasColumnType("int");

                    b.Property<string>("OutgoingMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GroupCheckinMessageId");

                    b.HasIndex("GroupCheckinId");

                    b.HasIndex("OutgoingMessageId");

                    b.ToTable("GroupCheckInMessage", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckInParticipantCheckIn", b =>
                {
                    b.Property<int>("GroupCheckinId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("ParticipantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("AutoReAddTokenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CheckInMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CheckInMethod")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("CheckInSuccess")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("IncomingMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("MessageReceivedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("MessageSentTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RemovalMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("RemovalTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GroupCheckinId", "ParticipantId");

                    b.HasIndex("CheckInMessageId");

                    b.HasIndex("IncomingMessageId");

                    b.HasIndex("RemovalMessageId");

                    b.ToTable("GroupCheckInParticipantCheckIn", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupParticipant", b =>
                {
                    b.Property<string>("GroupId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParticipantId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LastGroupMessage")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("GroupId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("GroupParticipant", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.MessageTemplate", b =>
                {
                    b.Property<int>("MessageTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageTemplateId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageTemplateType")
                        .HasColumnType("int");

                    b.HasKey("MessageTemplateId");

                    b.ToTable("MessageTemplate", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.MurderJoke", b =>
                {
                    b.Property<int>("MurderJokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MurderJokeId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("JokeText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimesTold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("MurderJokeId");

                    b.ToTable("MurderJoke", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.Participant", b =>
                {
                    b.Property<string>("WId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("FriendlyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("WId");

                    b.ToTable("Participant", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.ReAddJobTrigger", b =>
                {
                    b.Property<int>("ReAddJobTriggerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReAddJobTriggerId"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<DateTimeOffset>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("sysdatetimeoffset()");

                    b.Property<string>("FailureMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("JobCompleteDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("JobStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("StartMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SuccessMessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TokenGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReAddJobTriggerId");

                    b.HasIndex("TokenGuid");

                    b.ToTable("ReAddJobTrigger", "Murder");
                });

            modelBuilder.Entity("MurderBot.Data.Models.AutoReAddToken", b =>
                {
                    b.HasOne("MurderBot.Data.Models.GroupCheckIn", "GroupCheckIn")
                        .WithMany()
                        .HasForeignKey("GroupCheckinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GroupCheckIn");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupAutoReply", b =>
                {
                    b.HasOne("MurderBot.Data.Models.Group", "Group")
                        .WithMany("AutoReplies")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupAutoReplyMessage", b =>
                {
                    b.HasOne("MurderBot.Data.Models.GroupAutoReply", "GroupAutoReply")
                        .WithMany("Messages")
                        .HasForeignKey("GroupAutoReplyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MurderBot.Data.Models.ChatMessage", "OutgoingMessage")
                        .WithMany()
                        .HasForeignKey("OutgoingMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GroupAutoReply");

                    b.Navigation("OutgoingMessage");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckIn", b =>
                {
                    b.HasOne("MurderBot.Data.Models.Group", "Group")
                        .WithMany("GroupCheckIns")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckInMessage", b =>
                {
                    b.HasOne("MurderBot.Data.Models.GroupCheckIn", "GroupCheckIn")
                        .WithMany("Messages")
                        .HasForeignKey("GroupCheckinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MurderBot.Data.Models.ChatMessage", "OutgoingMessage")
                        .WithMany()
                        .HasForeignKey("OutgoingMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("GroupCheckIn");

                    b.Navigation("OutgoingMessage");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckInParticipantCheckIn", b =>
                {
                    b.HasOne("MurderBot.Data.Models.ChatMessage", "CheckInMessage")
                        .WithMany()
                        .HasForeignKey("CheckInMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MurderBot.Data.Models.GroupCheckIn", "GroupCheckIn")
                        .WithMany("ParticipantsCheckIns")
                        .HasForeignKey("GroupCheckinId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MurderBot.Data.Models.ChatMessage", "IncomingMessage")
                        .WithMany()
                        .HasForeignKey("IncomingMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("MurderBot.Data.Models.ChatMessage", "RemovalMessage")
                        .WithMany()
                        .HasForeignKey("RemovalMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CheckInMessage");

                    b.Navigation("GroupCheckIn");

                    b.Navigation("IncomingMessage");

                    b.Navigation("RemovalMessage");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupParticipant", b =>
                {
                    b.HasOne("MurderBot.Data.Models.Group", "Group")
                        .WithMany("GroupParticipants")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MurderBot.Data.Models.Participant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("MurderBot.Data.Models.ReAddJobTrigger", b =>
                {
                    b.HasOne("MurderBot.Data.Models.AutoReAddToken", "AutoReAddToken")
                        .WithMany()
                        .HasForeignKey("TokenGuid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AutoReAddToken");
                });

            modelBuilder.Entity("MurderBot.Data.Models.Group", b =>
                {
                    b.Navigation("AutoReplies");

                    b.Navigation("GroupCheckIns");

                    b.Navigation("GroupParticipants");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupAutoReply", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MurderBot.Data.Models.GroupCheckIn", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("ParticipantsCheckIns");
                });
#pragma warning restore 612, 618
        }
    }
}
